# https://moonrepo.dev/docs/config/workspace
$schema: 'https://moonrepo.dev/schemas/workspace.json'

# Extend and inherit an external configuration file. Must be a valid HTTPS URL or file system path.
# extends: './shared/workspace.yml'

# REQUIRED: A map of all projects found within the workspace, or a list or file system globs.
# When using a map, each entry requires a unique project ID as the map key, and a file system
# path to the project folder as the map value. File paths are relative from the workspace root,
# and cannot reference projects located outside the workspace boundary.
projects:
    - 'examples/*'
    - 'packages/*'

# Configures Node.js within the toolchain. moon manages its own version of Node.js
# instead of relying on a version found on the host machine. This ensures deterministic
# and reproducible builds across any machine.
node:
    # The version to use. Must be a semantic version that includes major, minor, and patch.
    # We suggest using the latest active LTS version: https://nodejs.org/en/about/releases
    version: '16.18.0'

    # The package manager to use when managing dependencies.
    # Accepts "npm" (default), "pnpm", or "yarn".
    packageManager: 'npm'

    # Add `node.version` as a constraint in the root `package.json` `engines`.
    addEnginesConstraint: true

    # Use the `package.json` name as an alias for the respective moon project.
    # aliasPackageNames: 'name-and-scope'

    # Dedupe dependencies after the lockfile has changed.
    dedupeOnLockfileChange: true

    # Version format to use when syncing dependencies within the project's `package.json`.
    # dependencyVersionFormat: 'workspace'

    # Infer and automatically create moon tasks from `package.json` scripts, per project.
    # BEWARE: Tasks and scripts are not 1:1 in functionality, so please refer to the documentation.
    # inferTasksFromScripts: false

    # Sync a project's `dependsOn` as dependencies within the project's `package.json`.
    syncProjectWorkspaceDependencies: true

    # Sync `node.version` to a 3rd-party version manager's config file.
    # Accepts "nodenv" (.node-version), "nvm" (.nvmrc), or none.
    # syncVersionManagerConfig: 'nvm'

# Configures how moon integrates with TypeScript.
typescript:
    # When `syncProjectReferences` is enabled and a dependent project reference
    # *does not* have a `tsconfig.json`, automatically create one.
    createMissingConfig: true

    # Name of `tsconfig.json` file in the project root.
    # projectConfigFileName: 'tsconfig.json'

    # Name of `tsconfig.json` file in the workspace root.
    # rootConfigFileName: 'tsconfig.json'

    # Name of the config file in the workspace root that defines shared compiler options
    # for all project reference based config files.
    # rootOptionsConfigFileName: 'tsconfig.options.json'

    # Update the project's `tsconfig.json` to route the `outDir` to moon's cache.
    # routeOutDirToCache: true

    # Sync a project's `dependsOn` as TypeScript project references within the
    # project's `tsconfig.json` and the workspace root `tsconfig.json`.
    syncProjectReferences: true

    # Sync a project's project references as `paths` aliases.
    # syncProjectReferencesToPaths: true

# Configures the version control system to utilize within the workspace. A VCS
# is required for determining touched (added, modified, etc) files, calculating file hashes,
# computing affected files, and much more.
vcs:
    # The manager/binary to use when managing the repository.
    # Accepts "git", or "svn". Defaults to "git".
    manager: 'git'

    # The default branch (master/main/trunk) in the repository for comparing the
    # local branch against. For git, this is is typically "master" or "main",
    # and must include the remote prefix (before /). For svn, this should always be "trunk".
    defaultBranch: 'main'
